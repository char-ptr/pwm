//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "vault_item")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub item_id: Uuid,
    pub vault_id: Uuid,
    pub folder_id: Option<Uuid>,
    pub name: String,
    pub username: Option<String>,
    pub password: Option<String>,
    pub notes: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub custom_fields: Option<Json>,
    pub icon_url: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::vault::Entity",
        from = "Column::VaultId",
        to = "super::vault::Column::VaultId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Vault,
    #[sea_orm(
        belongs_to = "super::vault_folder::Entity",
        from = "Column::FolderId",
        to = "super::vault_folder::Column::FolderId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    VaultFolder,
    #[sea_orm(has_many = "super::vault_website_entry::Entity")]
    VaultWebsiteEntry,
}

impl Related<super::vault::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Vault.def()
    }
}

impl Related<super::vault_folder::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VaultFolder.def()
    }
}

impl Related<super::vault_website_entry::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VaultWebsiteEntry.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
